1. 제어문

- 같을 때
x is y

- if
if ~~ :
    ~~~

if
elif
else

- 리스트 []
  튜플    ()
  딕셔너리 {}

- for문
for i in range(0, 11):
      print(i) 0~10까지
for i in range(0, 20, 2): ## 2 는 증가치
    print(i) 

favor_hobby = ['fishing', 'reading', 'shopping']
for hobby in favor_hobby:
    print('{} is my favorite hobby'.format(hobby))

fishing is my favorite hobby
reading is my favorite hobby
shopping is my favorite hobby

#range(start, end, 증가치 함수)
# start의 default 값은 0
# end는 항상 end 값은 -1
# 증가치의 default 값은 1



#dictionary
wish_travel_city = {'bangkok':'thai',
                    'la':'usa',
                    'seoul':'korea',
                    'bangkok':'thai2'
                    }
print(type(wish_travel_city))
#key ,value  를 출력할때 keys()함수
print(wish_travel_city['la'])

for city in wish_travel_city.keys():
    print('{} in {}'.format(city, wish_travel_city[city]))
# key 동일하면 안됨,

#key, value를 출력할 때 items()  함수 사용
for city, country in wish_travel_city.items():
    print(f'{city} in {country}')
   # f있으면 괄호 없어짐

#keys()와 iems() 결과, 
bangkok in thai2
la in usa
seoul in korea
########### 물어보기




######오늘예제 구구단, 게스게임, 점수평균

2. 자료구조
딕셔너리 {}
튜플()
리스트 스택 []
셋 {}
#튜플은 변경되지 않는 데이터
#셋은 중복 허용 안해
#셋에서 discard : 강제 삭제, remove : 셋에 있는 원소 삭제

pip install flake8
실행시키고 싶은 파일 오른쪽 버튼 open terminal 하면
좋은 방법을 제시

3. 함수
함수 사용 이유 : 재사용
 

###########책 내용######
5. 제어문
5. 2 블록구조
- if 문 중첩은  if and문과 같은 효과

ex)
if man == True and age >= 19:
    print("성인 남자")
if man == True and age < 19:
    print("소년")

if man== True:
    if age >= 19:
        print("성인 남자")
    else:
        print("소년")


6. 반복문
6.1  반복문
- 제어 변수의 활용

for a in range(5):
    print("이 문장을 반복")
-> 제어 변수 참조안하고 명령 다섯번 반복 출력

- break : 중간에 반복 중지하거나 건너뛰어야 할 경우
           보통 특정 조건에 의해 탈출, if문과 자주 사용

- continue : 이번 루프 하나만 건너뛰고 나머지는 계속 수행
6.2 루프의 활용
                 

7. 함수 
7.1 함수와 인수

- 파이썬 인터프리터 언어
  함수 호출하기 전에 함수 먼저 정의되어야

- 인수: 호출원에서 함수로 전달되는 작업거리
  인수는 함수의 동작에 변화를 줌

- pass : 함수 만들예정에쓰이기도 함
  def dfdf():
      pass

7.2 인수의 형식
- 가변인수 : 임의 개수의 인수
                 인수 앞에 * 붙이면 여러개 가ㅡㄴㅇ
                 일반 인수 뒤에 가변 인수 와야

### 인수에 초기값 예제
def calstep(begin, end, step=1)
    sum =0
   for num in range(begin, end+1, step)
       sum += num
   return sum

print("1~10=", calstep(1, 10, 2))
print("1~10=", calstep(1, 10))
 초기값 가지는 인수는 항상 마지막에 나와야
calstep(begin, step=1, end) 이건 에러 
